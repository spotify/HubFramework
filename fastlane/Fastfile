opt_out_usage
default_platform :ios

platform :ios do

  desc 'Run unit tests'
  lane :test do
    test_static
    test_dynamic
  end

  desc 'Run all tests linked with the HubFramework as a static library'
  private_lane :test_static do
    run_tests(scheme: 'HubFramework', output_label: 'tests-static')
  end

  desc 'Run all tests linked with the HubFramework as a dynamic framework'
  private_lane :test_dynamic do
    run_tests(scheme: 'HubFramework-iOS', output_label: 'tests-dynamic')
  end

  desc 'Run UI tests'
  lane :test_ui do
    run_tests(scheme: 'HubFrameworkDemo', output_label: 'ui-tests')
  end

  private_lane :run_tests do |options|
    scheme = options[:scheme]
    output_label = options[:output_label]

    UI.user_error!("No Xcode scheme provided") unless scheme
    UI.user_error!("No label for the output was provided") unless output_label

    system('pkill', '-9', '-x', 'Simulator')
    UI.success('Simulator app killed')

    device = ENV['TEST_DEVICE_NAME'] || 'iPhone 6s'
    UI.message("Simulator testing device set to '#{device}'")

    log_directory = "build/logs/#{output_label}"
    output_directory = "build/#{output_label}"
    ENV['XCPRETTY_JSON_FILE_OUTPUT'] = "#{output_directory}/summary.json"

    scan(
      :workspace => 'HubFramework.xcworkspace',
      :scheme => scheme,
      :devices => [device],
      :derived_data_path => 'build/DerivedData',
      :output_directory => output_directory,
      :buildlog_path => log_directory,
      :code_coverage => true,
      :output_types => '',
      :fail_build => false,
      :formatter => 'xcpretty-json-formatter'
    )

    trainer(
      path: 'build',
      output_directory: output_directory,
      extension: '.junit'
    )
  end


  desc 'Build the demo app'
  lane :demo do
    ENV['XCPRETTY_JSON_FILE_OUTPUT'] = 'build/demo/summary.json'
    demo_project = 'demo/HubFrameworkDemo.xcodeproj'

    xcodebuild(
      :build => true,
      :parallelize_targets => true,
      :project => demo_project,
      :scheme => 'HubFrameworkDemo',
      :sdk => 'iphonesimulator',
      :configuration => 'Release',
      :derivedDataPath => 'build/DerivedData',
      :buildlog_path => 'build/logs/demo',
      :xcpretty_output => 'formatter `xcpretty-json-formatter`',
    )
  end


  desc 'Build the live CLI'
  lane :live do
    ENV['XCPRETTY_JSON_FILE_OUTPUT'] = 'build/live/summary.json'
    live_project = 'live/HubFrameworkLive.xcodeproj'

    recreate_schemes(project: live_project)

    xcodebuild(
      :build => true,
      :parallelize_targets => true,
      :project => live_project,
      :scheme => 'HubFrameworkLive',
      :sdk => 'macosx',
      :configuration => 'Release',
      :derivedDataPath => 'build/DerivedData',
      :buildlog_path => 'build/logs/live',
      :xcpretty_output => 'formatter `xcpretty-json-formatter`',
    )
  end


  desc 'Lint the source code and other linteable artifacts'
  lane :lint do
    pod_lib_lint(:quick => true)

    license_header_files = Dir.chdir("..") do
      license_header_files = Dir.glob('{live/sources/*.swift,demo/{sources,tests}/*.swift,include/HubFramework/*.h,sources/*.{h,m},tests/*/*.{h,m},tests/*.m}')
    end
    lint_sources_for_license_header(
      :template => 'other/license_header_template.txt',
      :files => license_header_files
    )
  end


  desc 'Validate changes according to a set of rules'
  lane :validate_changes do
    danger(verbose: true)
  end


  desc 'Update the framework documentation and publish it'
  lane :update_docs do
    if git_branch == "master"
      # sh 'cd .. && rake docs:generate'
      # sh 'cd .. && rake docs:publish'
    end
  end

  desc 'Report test coverage'
  private_lane :report_coverage do
    codecov() if ENV['CODECOV_TOKEN'] or ENV['TRAVIS'] == 'true' or ENV['CIRCLECI'] == 'true'
  end


  desc 'Execute all CI lanes'
  desc 'This action can be configured using the following environment variable (valid values are `YES` and `NO`):'
  desc ''
  desc '- `LINT`:           Whether the sources and certain artifacts should be linted defaults to `YES`'
  desc '- `RUN_TESTS`:      Whether unit tests should be run, defaults to `YES`'
  desc '- `BUILD_DEMO_APP`: Whether the demo app should be built or not, defaults to `YES`'
  desc '- `RUN_UI_TESTS`:   Whether ui tests should be run against the demo app, defaults to `YES`'
  desc '- `BUILD_LIVE_CLI`: Whether the live CLI should be built or not, defaults to `YES`'
  lane :ci_all do
    lint if shouldPerformStep('LINT')
    test if shouldPerformStep('RUN_TESTS')
    test_ui if shouldPerformStep('RUN_UI_TESTS')
    demo if shouldPerformStep('BUILD_DEMO_APP') && !shouldPerformStep('RUN_UI_TESTS')
    live if shouldPerformStep('BUILD_LIVE_CLI')
    report_coverage if shouldPerformStep('RUN_TESTS') || shouldPerformStep('RUN_UI_TESTS')
  end

  # Whether we should execute the step or not.
  # Looks up the value in the environment variables where a missing, empty, or 'YES' string is
  # considerered to denote that the step should be ran. Any other value is interpreted as 'skip
  # this step'.
  def shouldPerformStep(step)
    value = ENV[step].to_s.downcase

    # We should perform if the value is the empty string, or if it's set to `yes`, `true` or `1`
    value.empty? or value == 'yes' or value == '1' or value == 'true'
  end

end
